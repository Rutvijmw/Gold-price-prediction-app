import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from PIL import Image

st.title('💰 Gold Price Prediction App')

# Image/Logo
img = Image.open("gold-price-predictions.png")
st.image(img, use_column_width=True)

# File uploader
uploaded_file = st.file_uploader("📂 Upload your CSV dataset", type=["csv"])
if uploaded_file is not None:
    ds = pd.read_csv(uploaded_file)
else:
    ds = pd.read_csv("gld_price_data.csv")  # default dataset

# Show dataset preview
st.subheader("Dataset Preview")
st.write(ds.head())

# Data summary
with st.expander("🔍 Dataset Summary"):
    st.write("Shape:", ds.shape)
    st.write("Missing values:", ds.isnull().sum())
    st.write(ds.describe())

# Correlation
correlation = ds.corr()
with st.expander("📊 Correlation with Gold Price"):
    st.write(correlation['GLD'])

# Distribution Plot
st.subheader("GLD Price Distribution")
fig, ax = plt.subplots()
sns.histplot(ds['GLD'], color='green', ax=ax, kde=True)
st.pyplot(fig)

# Features and target
X = ds.drop(['Date', 'GLD'], axis=1)
y = ds['GLD']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train model
reg = RandomForestRegressor()
reg.fit(X_train, y_train)
pred = reg.predict(X_test)
r2 = r2_score(y_test, pred)

# Show performance
st.subheader("📈 Model Performance")
st.write("R² Score:", round(r2, 4))

# Show predictions
with st.expander("🔮 Sample Predictions"):
    results = pd.DataFrame({"Actual": y_test.values[:20], "Predicted": pred[:20]})
    st.write(results)

# Custom prediction with sliders
st.subheader("🎛️ Try Your Own Prediction")

input_data = {}
for col in X.columns:
    col_min = float(ds[col].min())
    col_max = float(ds[col].max())
    col_mean = float(ds[col].mean())
    input_data[col] = st.slider(
        f"Select value for {col}",
        min_value=col_min,
        max_value=col_max,
        value=col_mean
    )

if st.button("Predict Gold Price"):
    input_df = pd.DataFrame([input_data])
    prediction = reg.predict(input_df)[0]
    st.success(f"💡 Predicted Gold Price: {prediction:.2f}")
